package rules;

import com.bespoke.drinking.model.*;
import com.bespoke.drinking.dto.*;

import java.util.*;

global List bestDrinks;
global Integer bestRestaurant;
global List searchAndFilterDrinksResult;
global List searchAndFilterRestaurantsResult;

query getBestDrinks(Preference $preference, String $city, List $result)
	$drinks: List();
	$filter: List(size > 0) from accumulate(
		Drink($d: this, 
			alcoholic == $preference.getAlcoholic(), 
			hot == $preference.getHot(), 
			caffeine == $preference.getCaffeine(), 
			restaurant.getCity() == $city) from $drinks,
		collectList($d)
	);
	$filterAllergies: List(size > 0) from accumulate ( 
    	Drink($drink: this, $ingredients: ingredients) from $filter
    	and
    	String(!$ingredients.contains(this)) from $preference.getAllergies(),
    	collectList($drink)
    );
    $biggestValue: Number() from accumulate (
    	$elem: Number() from $preference.getTexture().values(),
    	max($elem));
    $bestTexture: Map.Entry(this.getValue() == $biggestValue) from $preference.getTexture().entrySet();
    $filterTexture: List(size > 0) from accumulate(
		Drink($d: this, texture == $bestTexture.getKey()) from $filterAllergies,
		collectList($d)
	);
	$result:= List(size > 0) from accumulate(
		Drink($d: this, $taste: taste) from $filterTexture
		and
		eval($preference.getTaste().equals($taste)),
		collectList($d)
	);
end

query getBestRestaurant(BestDrinksDTO $drinks, Number $finalRestaurant)
	$restaurantMap: Map() from accumulate ( 
		Drink($d: this) from $drinks.getDrinks(),
    	init(
    		Map<Integer, Integer> restaurantIds = new HashMap<Integer, Integer>();
    	),
        action(
        	if (restaurantIds.get($d.getRestaurant().getId()) == null) {
        		restaurantIds.put($d.getRestaurant().getId(), 1);
        	} else {
        		restaurantIds.put($d.getRestaurant().getId(), restaurantIds.get($d.getRestaurant().getId()) + 1);
        	};
        ),
        result(restaurantIds)
	);
	$finalRestaurant:= Number() from accumulate (
    	$elem: Number() from $restaurantMap.values(),
    	max($elem)
    );
end

query searchAndFilterDrinks(List $drinks, SearchFilterDrinksDTO $searchFilterDTO, List $searchAndFilter)
	$search: List() from accumulate ( 
    	Drink
    	(
    		$drink: this,
    		($drink.getName().matches("(?i).*?" + $searchFilterDTO.getName() + ".*?") || $searchFilterDTO.getName().equals("")) && 
    		($drink.getRestaurant().getName().matches("(?i).*?" + $searchFilterDTO.getRestaurant() + ".*?") || $searchFilterDTO.getRestaurant().equals("")) &&
    		($drink.getIngredients().contains($searchFilterDTO.getIngredient().toLowerCase()) || $searchFilterDTO.getIngredient().equals(""))
    	)
    	from $drinks,
    	collectList($drink)
    );
    $searchAndFilter:= List() from accumulate (
    	Drink
    	(
    		$d: this,
    		($d.getAlcoholic() == $searchFilterDTO.getAlcoholic() || $searchFilterDTO.getAlcoholic() == null) &&
    		($d.getCaffeine() == $searchFilterDTO.getCaffeine() || $searchFilterDTO.getCaffeine() == null) &&
    		($d.getHot() == $searchFilterDTO.getHot() || $searchFilterDTO.getHot() == null)
    	)
    	from $search,
    	collectList($d)
    ); 
end

query searchAndFilterRestaurants(List $restaurants, SearchFilterRestaurantsDTO $searchFilterDTO, List $result)
	$result:= List() from accumulate (
    	Restaurant
    	(
    		$r: this,
    		($r.getName().matches("(?i).*?" + $searchFilterDTO.getName() + ".*?") || $searchFilterDTO.getName().equals("")) &&
    		($r.getCity().matches("(?i).*?" + $searchFilterDTO.getCity() + ".*?") || $searchFilterDTO.getCity().equals(""))
    	)
    	from $restaurants,
    	collectList($r)
    );
end

rule "Best Drinks"
	when
		$p: Preference();
		$city: String();
        getBestDrinks($p, $city, $result;);
    then
    	drools.getKnowledgeRuntime().setGlobal("bestDrinks", $result);
end

rule "Best Restaurant"
	when
		$drinks: BestDrinksDTO();
        getBestRestaurant($drinks, $finalRestaurant;);
    then
    	drools.getKnowledgeRuntime().setGlobal("bestRestaurant", $finalRestaurant.intValue());
end

rule "Search and filter drinks"
	agenda-group "search-filter-drinks"
	when
		$drinks: List();
		$searchFilterDTO: SearchFilterDrinksDTO();
		searchAndFilterDrinks($drinks, $searchFilterDTO, $searchAndFilter;);
	then
		drools.getKnowledgeRuntime().setGlobal("searchAndFilterDrinksResult", $searchAndFilter);
end

rule "Search and filter restaurants"
	agenda-group "search-filter-restaurants"
	when
		$restaurants: List();
		$searchFilterDTO: SearchFilterRestaurantsDTO();
		searchAndFilterRestaurants($restaurants, $searchFilterDTO, $result;);
	then
		drools.getKnowledgeRuntime().setGlobal("searchAndFilterRestaurantsResult", $result);
end
 