package rules;

import com.bespoke.drinking.model.*;

import java.util.*;

global List bestDrinks;

query getBestDrinks(Preference $preference, String $city, List $result)
	$drinks: List();
	$filter: List(size > 0) from accumulate(
		Drink($d: this, 
			alcoholic == $preference.getAlcoholic(), 
			hot == $preference.getHot(), 
			caffeine == $preference.getCaffeine(), 
			restaurant.getCity() == $city) from $drinks,
		collectList($d)
	);
	$filterAllergies: List(size > 0) from accumulate ( 
    	Drink($drink: this, $ingredients: ingredients) from $filter
    	and
    	String(!$ingredients.contains(this)) from $preference.getAllergies(),
    	collectList($drink)
    );
    $biggestValue: Number() from accumulate (
    	$elem: Number() from $preference.getTexture().values(),
    	max($elem));
    $bestTexture: Map.Entry(this.getValue() == $biggestValue) from $preference.getTexture().entrySet();
    $filterTexture: List(size > 0) from accumulate(
		Drink($d: this, texture == $bestTexture.getKey()) from $filterAllergies,
		collectList($d)
	);
	$result:= List(size > 0) from accumulate(
		Drink($d: this, $taste: taste) from $filterTexture
		and
		eval($preference.getTaste().equals($taste)),
		collectList($d)
	);
end

rule "Best Drinks"
	when
		$p: Preference();
		$city: String();
        getBestDrinks($p, $city, $result;);
    then
    	drools.getKnowledgeRuntime().setGlobal("bestDrinks", $result);
end
    	