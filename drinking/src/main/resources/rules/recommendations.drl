package rules;

import com.bespoke.drinking.model.*;

import java.util.*;

query "Best Drinks" (Preference $preference, String $city)
	$drinks: List(size > 0) from collect(Drink());
	$filter: List(size > 0) from accumulate(
		Drink($d: this, 
			alcoholic == $preference.getAlcoholic(), 
			hot == $preference.getHot(), 
			caffeine == $preference.getCaffeine(), 
			restaurant.getCity() == $city) from $drinks,
		collectList($d)
	);
	$filterAllergies: List(size > 0) from accumulate(
		Drink($d: this, $ingredients: ingredients) from $filter,
		Number(intValue > 0) from accumulate(
			$allergies from collect($preference.getAllergies()),
			String($ingredients contains this) from $allergies,
			init(int count = 0;),
			action(count += 1;),
			reverse(count -= 1;),
			result(count)
		),
		collectList($d)
	);
	$filterTexture: List(size > 0) from accumulate(
		$bestTexture: Texture() from accumulate(
			$textureMap: Map<Texture, Double> from $preference.getTexture(),
			$biggestValue: max($textureMap.values()),
			$texture: Texture() from accumulate(
				$entry: Map<Texture, Double>.Entry(this.getValue() == $biggestValue) from $textureMap.entrySet(),
				result($entry.getKey())
			),
			result($texture)
		),
		Drink($d: this, texture == $bestTexture) from $filterAllergies,
		collectList($d)
	);
	$result: List(size > 0) from accumulate(
		$flavourMap: Map<Flavour, Double> from $preference.getTaste(),
		Drink($d: this, taste.equals($flavourMap)),
		collectList($d)
	)
end